
- hosts: all
  become: yes
  become_user: root

  vars:
    certbot_dns_credentials: ../etc/certbot-dns-user-credentials.yml
    docker_config_json: ../etc/docker-conf/config.json
    docker_compose_file: ../docker-compose-prod.yml
    master_key_file: ../rails/config/master.key
    nginx_conf_file: ../docker/nginx-conf-prod/app.conf

    cert_host: tiddlyhost.com
    letsencrypt_dir: /etc/letsencrypt/live/{{ cert_host }}
    certs_dir: "{{ home_dir }}/certs"
    nginx_conf_dir: "{{ home_dir }}/docker/nginx-conf-prod"
    secrets_dir: "{{ home_dir }}/secrets"

    service_name: thost
    db_name: app_production
    db_user: postgres

  tasks:

  - name: Add repo for docker-ce
    command:
      cmd: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
      creates: /etc/yum.repos.d/docker-ce.repo
      warn: false
    tags:
    - deps

  - name: Install docker and a few other packages we need
    dnf:
      state: present
      name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - certbot
      - chkconfig
      - make
      - cronie
    tags:
    - deps

  - name: Start docker service
    systemd:
      name: docker
      state: started
      enabled: yes
    tags:
    - deps

  - name: Start crond
    systemd:
      name: crond
      state: started
      enabled: yes
    tags:
    - deps

  - name: Pip install docker-compose and certbot-dns-route53
    pip:
      name:
      - docker-compose
      - certbot-dns-route53
    tags:
    - deps

  - name: Make .docker dir for root user
    file:
      path: "{{ root_home_dir }}/.docker"
      state: directory
    tags:
    - deps

  - name: Copy config.json file for docker pull credentials
    copy:
      src: "{{ docker_config_json }}"
      dest: "{{ root_home_dir }}/.docker/config.json"
      mode: "0600"
    tags:
    - deps

  - name: Create dir for certbot aws credentials
    file:
      path: "{{ root_home_dir }}/.aws"
      state: directory
    tags:
    - certs

  - name: Install AWS credentials for certbot
    copy:
      src: "{{ certbot_dns_credentials }}"
      dest: "{{ root_home_dir }}/.aws/credentials"
      mode: "0600"
    tags:
    - certs

  - name: Create a cert if it doesn't exist
    command:
      cmd: >-
        certbot certonly
          -d {{ cert_host }} -d *.{{ cert_host }}
          --dns-route53
          -n --agree-tos -m simon.baird@gmail.com

      creates: "{{ letsencrypt_dir }}/fullchain.pem"
    tags:
    - certs

  - name: Renew certs maybe
    command:
      # TODO: The post-hook is untested, not sure if it will work
      cmd: certbot renew --post-hook "docker-compose restart prod"
    register: certbot_renew
    tags:
    - certs

  - name: Show renew output
    debug:
      var: certbot_renew.stdout_lines
    tags:
    - certs

  - name: Create dir for certs
    file:
      path: "{{ certs_dir }}"
      state: directory
    tags:
    - certs

  - name: Copy cert files to where the container looks for them
    # TODO: It would be better to only do this if they changed
    command:
      cmd: cp {{ letsencrypt_dir }}/{{ item.from }} {{ certs_dir }}/{{ item.to }}
    with_items:
    - from: fullchain.pem
      to: ssl.cert
    - from: privkey.pem
      to: ssl.key
    tags:
    - certs

  - name: Update owner of the cert files
    file:
      path: "{{ certs_dir }}"
      recurse: yes
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
    tags:
    - certs

  - name: Copy docker-compose file
    become: no
    copy:
      src: "{{ docker_compose_file }}"
      dest: "{{ home_dir }}/docker-compose.yml"
    tags:
    - app

  - name: Pull latest images
    # So docker-compose doesn't try to build
    command:
      cmd: docker-compose pull -q
    tags:
    - app
    - fast-upgrade

  - name: Create nginx conf dir
    become: no
    file:
      path: "{{ nginx_conf_dir }}"
      state: directory
    tags:
    - app

  - name: Copy nginx config
    become: no
    copy:
      src: "{{ nginx_conf_file }}"
      dest: "{{ nginx_conf_dir }}/app.conf"
      mode: "0600"
    tags:
    - app

  - name: Create dir for secrets
    become: no
    file:
      path: "{{ secrets_dir }}"
      state: directory
    tags:
    - app

  - name: Copy master key file
    become: no
    copy:
      src: "{{ master_key_file }}"
      dest: "{{ secrets_dir }}/master.key"
      mode: "0400"
    tags:
    - app

  - name: Copy init script
    template:
      src: templates/etc/init.d/{{ service_name }}.j2
      dest: /etc/init.d/{{ service_name }}
      mode: "0755"
    register: init_script
    tags:
    - app

  - name: Run systemctl daemon-reload if required
    command:
      cmd: systemctl daemon-reload
    when: init_script.changed
    tags:
    - app

  - name: Start/restart service
    systemd:
      name: "{{ service_name }}"
      state: restarted
    tags:
    - app
    - fast-upgrade

  - name: Apply database migrations
    command:
      cmd: docker-compose exec prod bash -c "bin/rails db:migrate"
    register: db_migrate
    tags:
    - app
    - fast-upgrade
    - migration

  - name: Show database migration output
    debug:
      var: db_migrate.stdout_lines
    tags:
    - app
    - fast-upgrade
    - migration

  - name: Clean up unused docker images
    command:
      cmd: docker image prune -f
    tags:
    - app

  - name: Clean up stale containers
    command:
      cmd: docker-compose rm
    tags:
    - app

  - name: Create bin dir
    become: no
    file:
      path: "{{ bin_dir }}"
      state: directory
    tags:
    - scripts

  - name: Copy up a Makefile and some scripts
    become: no
    template:
      src: templates/{{ item }}.j2
      dest: "{{ home_dir }}/{{ item }}"
      mode: "0755"
    with_items:
    - Makefile
    - bin/db-backup
    tags:
    - scripts

  - name: Create a cron job for regular db backups
    cron:
      name: thost db backup
      user: root
      job: "{{ bin_dir }}/db-backup"
      minute: "5"
      hour: "*/8"
    tags:
    - scripts
